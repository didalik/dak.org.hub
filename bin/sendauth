#!/bin/bash

request () { # kind {{{1
  local email=$(git config --get user.email);[ -n "$email" ] || user_unknown $1
  local name=$(git config --get user.name);[ -n "$name" ] || user_unknown $1
  
  local kind=$1
  local hubpk="$(cat $HOME/.ssh/id_ed25519.pub)"
  local cmd='. $PWD/.ssh/.$HOSTNAME.env;PATH=$NVM_BIN:$PATH $SENDAUTH'
  cmd="$cmd request $kind $email $hubpk $name 2>/dev/null"
  #cmd="$cmd request $kind $email $hubpk $name"
  ssh $AUTH_ACCOUNT "$cmd" # TODO https://kot.didalik.workers.dev/sendauth/request
}

user_unknown () { # authorization {{{1
  printc 'red bold' "+ bin/sendauth request $1: user_unknown" >&2
  cat >&2 << HD

Please complete your initial git setup and introduce yourself as follows:

git config --global user.name "FirstName LastName"
git config --global user.email name@domain.org

See also:
- https://www.ipfire.org/docs/devel/git/setup

HD
  exit 1
}

validate_args () { # authorization {{{1
  err "+ $HOSTNAME $0 started on $(date) with $# args: $@" >&2
  local auth=$1 kind=$2
  case $auth in
    request)
      case $kind in
        devhub|tophub) request $kind;;
        script) return # TODO implement
        *) return 2
      esac;;
    approval)
      validate_hub;;
    *) return 1
  esac
}

validate_hub () { # on approval {{{1
  local ifs="$IFS"
  IFS=".$IFS"
  read header payload64 signature
  IFS="$ifs"
  local payload="$(echo $payload64|base64 -d)"
  #out '+ bin/sendauth validate_hub:' >&2
  #echo -e "- header $header\n- payload $payload\n- signature $signature" >&2
  local hpk=${payload#*hpk?:?} asa=${payload#*asa?:?}
  hpk="${hpk%%?,*}"; asa="${asa%%?,*}"
  local hubpk="$(cat $HOME/.ssh/id_ed25519.pub)"
  if [ "$hpk" != "$hubpk" ]; then
    printc 'red bold' '+ validate_hub ERROR' hpk "'$hpk'" hubpk "'$hubpk'" >&2
    return 3;
  fi
  local cmd='. $PWD/.ssh/.$HOSTNAME.env;PATH=$NVM_BIN:$PATH $SENDAUTH'
  cmd="$cmd approval 2>/dev/null"
  #cmd="$cmd approval"
  echo "$header.$payload64.$signature" | ssh $asa "$cmd"
}

# }}}1

. build/util.sh
. $HOME/.ssh/.$HOSTNAME.env

validate_args $@ || exit
