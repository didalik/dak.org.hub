#!/bin/bash

err () { # {{{1
  local red=$(git config --get-color color.diff.whitespace "red")
  local reset=$(git config --get-color "" "reset")
  echo "${red}$@${reset}" >&2
}

request () { # account {{{1
  local account=$1
  local email=$(git config --get user.email)
  local name=$(git config --get user.name)
  local hubpk="$(cat $HOME/.ssh/id_ed25519.pub)"
  local cmd="request $account $email $hubpk $name"
  cmd='. $PWD/.ssh/.$HOSTNAME.env;PATH=$NODE_BIN:$PATH $SENDAUTH '"$cmd 2>/dev/null"
  ssh $AUTH_ACCOUNT "$cmd" # TODO https://hx.didalik.workers.dev/sendauth/request
}

validate_args () { # authorization {{{1
  err "+ $0 started on $(date) with $# args: $@"
  local auth=$1 account=$2
  case $auth in
    request)
      case $account in
        devhub|tophub) request $account;;
        *) return 2
      esac;;
    approval)
      validate_hub;;
    access)
      ;;
    *) return 1
  esac
}

validate_hub () { # on approval {{{1
  local ifs="$IFS"
  IFS=".$IFS"
  read header payload64 signature
  IFS="$ifs"
  local payload="$(echo $payload64|base64 -d)"
  echo -e "- header $header\n- payload $payload\n- signature $signature"
  local hpk=${payload#*hpk?:?}
  hpk="${hpk%%?,*}"
  local hubpk="$(cat $HOME/.ssh/id_ed25519.pub)"
  if [ "$hpk" != "$hubpk" ]; then
    return 3;
  fi
  local cmd='approval'
  cmd='. $PWD/.ssh/.$HOSTNAME.env;PATH=$NODE_BIN:$PATH $SENDAUTH '"$cmd" #  2>/dev/null"
  echo "$header.$payload64.$signature" | ssh $AUTH_ACCOUNT "$cmd"
}

# }}}1

# Run it here
# :!clear;bin/sendauth request tophub
##
err "+ HOSTNAME $HOSTNAME"
. $HOME/.ssh/.$HOSTNAME.env
validate_args $@ || exit
